Design Philosophy
--
We ultimately need access to all of Vulkans functionality. To begin with, aim to
get wrapper classes for all of the Vulkan objects that are represented by
handles into vk.h. This step can be verified by comparing to the handle 
definitions in the Vulkan specification XML file.

Not all objects have creation/destruction functions. For example, queues are 
tightly bound to logical device construction. Where objects do have 
creation/destruction functions, the default design pattern should be to indirect
implementions through a shared pointer.

The following is a list of all core and common extension handles:

  VkInstance
  VkPhysicalDevice
  VkDevice
  VkQueue
  VkSemaphore
  VkCommandBuffer
  VkFence
  VkDeviceMemory
  VkBuffer
  VkImage
  VkEvent
  VkQueryPool
  VkBufferView
  VkImageView
  VkShaderModule
  VkPipelineCache
  VkPipelineLayout
  VkRenderPass
  VkPipeline
  VkDescriptorSetLayout
  VkSampler
  VkDescriptorPool
  VkDescriptorSet
  VkFramebuffer
  VkCommandPool
  VkSurfaceKHR
  VkSwapchainKHR
  VkDisplayKHR
  VkDisplayModeKHR
  VkDebugReportCallbackEXT

The following types have destruction functions:

vkDestroyInstance(
vkDestroyDevice(
vkDestroyFence(
vkDestroySemaphore(
vkDestroyEvent(
vkDestroyQueryPool(
vkDestroyBuffer(
vkDestroyBufferView(
vkDestroyImage(
vkDestroyImageView(
vkDestroyShaderModule(
vkDestroyPipelineCache(
vkDestroyPipeline(
vkDestroyPipelineLayout(
vkDestroySampler(
vkDestroyDescriptorSetLayout(
vkDestroyDescriptorPool(
vkDestroyFramebuffer(
vkDestroyRenderPass(
vkDestroyCommandPool(
vkDestroySurfaceKHR(
vkDestroySwapchainKHR(
vkDestroyDebugReportCallbackEXT(